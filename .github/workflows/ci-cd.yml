name: User Service CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r user-service2/requirements-dev.txt
      
      - name: Set up Firebase credentials
        run: |
          echo '{"type": "service_account","project_id": "mock-project","private_key_id": "mock-key-id","private_key": "-----BEGIN PRIVATE KEY-----\nMOCKKEY\n-----END PRIVATE KEY-----\n","client_email": "mock@example.com","client_id": "mock-client-id","auth_uri": "https://accounts.google.com/o/oauth2/auth","token_uri": "https://oauth2.googleapis.com/token","auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs","client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/mock"}' > user-service2/serviceAccountKey.json
      
      - name: Verify test setup
        working-directory: user-service2
        run: |
          python -c "import prometheus_client; print('Prometheus registry contains', list(prometheus_client.REGISTRY._collector_to_names.keys()))"
      
      - name: Run tests
        env:
          FIREBASE_TEST_MODE: 'true'
          SUPABASE_URL: 'mock://supabase.test'
          SUPABASE_KEY: 'mock-key-for-testing'
        working-directory: user-service2
        run: |
          python -m pytest --cov=./ --cov-report=xml
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
          
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          
      - name: Check formatting with black
        run: |
          black --check .

  build-and-push:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - uses: actions/checkout@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/user-service
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Deploy to production
        run: |
          echo "Deployment would happen here"
          # In a real scenario, you would use something like:
          # - kubectl apply to update Kubernetes deployments
          # - AWS ECS deployment commands
          # - SSH into server and run docker-compose commands
          
      - name: Notify on success
        run: |
          echo "Deployment successful!"
          # Add notification via Slack, Teams, or email 