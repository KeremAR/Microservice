services:
  api-gateway:
    build: ./gateway-service
    container_name: api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-docker}
      - USER_SERVICE_URL=${USER_SERVICE_URL:-http://user-service:8000}
      - DEPARTMENT_SERVICE_URL=${DEPARTMENT_SERVICE_URL:-http://department-service:8083}
      - ISSUE_SERVICE_URL=${ISSUE_SERVICE_URL:-http://issue-service:8080}
      - NOTIFICATION_SERVICE_URL=${NOTIFICATION_SERVICE_URL:-http://notification-service:5004}
    volumes:
      - ./gateway-service/config:/app/config
    expose:
      - "3000"
    networks:
      - microservice-network
    restart: always
    depends_on:
      - user-service
      - department-service
      - issue-service
      - notification-service
      - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  department-service:
    build: ./department-service
    container_name: department-service
    environment:
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}
      - SPRING_RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - SPRING_RABBITMQ_PORT=${RABBITMQ_PORT:-5672}
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USER:-user}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-password}
    ports:
      - "8083:8083"
    expose:
      - "8083"
    depends_on:
      rabbitmq:
        condition: service_healthy
      issue-service:
        condition: service_started
    networks:
      - microservice-network
      
      
  user-service:
    build: ./user-service2
    container_name: user-service
    ports:
      - "5001:8000"
    expose:
      - "8000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Supabase connection details
      - SUPABASE_DB_HOST=${SUPABASE_DB_HOST}
      - SUPABASE_DB_PORT=${SUPABASE_DB_PORT:-5432}
      - SUPABASE_DB_NAME=${SUPABASE_DB_NAME:-postgres}
      - SUPABASE_DB_USER=${SUPABASE_DB_USER:-postgres}
      - SUPABASE_DB_PASSWORD=${SUPABASE_DB_PASSWORD}
      # Supabase HTTP API keys
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
    volumes:
      - ./user-service2:/app
    networks:
      - microservice-network

  issue-service:
    build: ./IssueService
    container_name: issue-service
    ports:
      - "5003:8080"
    expose:
      - "8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - MongoDB__ConnectionString=${MONGODB_CONNECTION_STRING}
      - MongoDB__Database=${MONGODB_DATABASE:-IssueDb}
      - RabbitMQ__HostName=${RABBITMQ_HOST:-rabbitmq}
      - RabbitMQ__UserName=${RABBITMQ_USER:-user}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD:-password}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
    networks:
      - microservice-network

  notification-service:
    build: ./notification-service
    container_name: notification-service
    ports:
      - "5004:5004"
    expose:
      - "5004"
    environment:
      - PORT=${NOTIFICATION_SERVICE_PORT:-5004}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT:-6543}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME:-postgres}
      - DATABASE_SSL=${DATABASE_SSL:-true}
      - RABBITMQ_URL=${RABBITMQ_URL:-amqp://user:password@rabbitmq:5672}
      - RABBITMQ_URI=${RABBITMQ_URL:-amqp://user:password@rabbitmq:5672}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - microservice-network
    restart: always

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI port
    expose:
      - "5672"
      - "15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-user}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-password}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservice-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Monitoring Services
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--log.level=debug'
    networks:
      - microservice-network
    restart: always
    extra_hosts:
      - "host.docker.internal:host-gateway"

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - ./monitoring/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml:ro
      - ./monitoring/grafana/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP:-false}
    networks:
      - microservice-network
    depends_on:
      - prometheus
    restart: always

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - microservice-network
    restart: always

volumes:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
  redis_data:

networks:
  microservice-network:
    driver: bridge 